LazyScript.load('jquery', function (global) {
	function Member(data) {
		this.registerForm = $(data.registerForm || '#register');
		this.registerContainer = $(data.registerContainer || '.register');
		this.loginForm = $(data.loginForm || '#login');
		this.loginContainer = $(data.loginContainer || '.login');
		this.changePasswordSendMailForm = $(data.changePasswordSendMailForm || '#change-password-send-mail');
		this.changePasswordSendMailContainer = $(data.changePasswordSendMailContainer || '.change-password-send-mail');
		this.changePasswordForm = $(data.changePasswordForm || '#change-password');
		this.changePasswordContainer = $(data.changePasswordContainer || '.change-password');
		this.logoutButton = $(data.logoutButton || '#logout');
		this.userContainer = $(data.userContainer || '.user');
		this.username = $(data.username || '.username');
		this.token = '';

		this.registerSuccess = message => alert(message);
		this.registerSuccess = data.registerSuccess || this.registerSuccess;

		this.registerError = message => alert(message);
		this.registerError = data.registerError || this.registerError;

		this.loginSuccess = () => location.reload();
		this.loginSuccess = data.loginSuccess || this.loginSuccess;

		this.loginError = message => alert(message);
		this.loginError = data.loginError || this.loginError;

		this.changePasswordSendMailSuccess = message => alert(message);
		this.changePasswordSendMailSuccess = data.changePasswordSendMailSuccess || this.changePasswordSendMailSuccess;

		this.changePasswordSendMailError = message => alert(message);
		this.changePasswordSendMailError = data.changePasswordSendMailError || this.changePasswordSendMailError;

		this.changePasswordSuccess = message => alert(message);
		this.changePasswordSuccess = data.changePasswordSuccess || this.changePasswordSuccess;

		this.changePasswordError = message => alert(message);
		this.changePasswordError = data.changePasswordError || this.changePasswordError;

		this.logoutSuccess = () => location.reload();
		this.logoutSuccess = data.logoutSuccess || this.logoutSuccess;

		this.logoutError = message => alert(message);
		this.logoutError = data.logoutError || this.loginError;

		this.register = () => {
			this.registerForm.submit(() => {
		        var data = {}, form = this.registerForm.serializeArray();
		        for (var i = 0; i < form.length; i++) {
		            data[form[i].name] = form[i].value;
		        }

		        this.sendRegister(data);
		    });
		}

		this.login = () => {
			this.loginForm.submit(() => {
		        var data = {}, form = this.loginForm.serializeArray();
		        for (var i = 0; i < form.length; i++) {
		            data[form[i].name] = form[i].value;
		        }

		        this.sendLogin(data);
		    });
		}

		this.changePasswordSendMail = () => {
			this.changePasswordSendMailForm.submit(() => {
		        var data = {}, form = this.changePasswordSendMailForm.serializeArray();
		        for (var i = 0; i < form.length; i++) {
		            data[form[i].name] = form[i].value;
		        }

		        this.sendChangePasswordSendMail(data);
		    });
		}

		this.changePassword = () => {
			this.changePasswordForm.submit(() => {
		        var data = {}, form = this.changePasswordForm.serializeArray();
		        for (var i = 0; i < form.length; i++) {
		            data[form[i].name] = form[i].value;
		        }

		        this.sendChangePassword(data);
		    });
		}

		this.logout = () => {
		    this.logoutButton.click(() => {
		        this.sendLogout();
		    });
		}

		this.csrf = (callback = null) => {
		    $.post('/member/csrf', data => {
		        $('input[name=_token]').val(data);
		        this.token = data;

		        callback ? callback() : null;
		    });
		}

		this.check = () => {
		    $.post('/member/check', data => {
		        if (data) {
		            this.registerContainer.remove();
		            this.loginContainer.remove();
		            this.userContainer.show();
		            this.username.html(data);
		        } else {
		            this.userContainer.remove();
		        }
		    });
		}

		this.sendRegister = (data) => {
			$[this.registerForm.attr('method')](this.registerForm.attr('action'), data, data => {
	        	data.success ? this.registerSuccess(data.success) : this.registerError(data.error);
	        }, 'json').fail(error => {
	        	if (error.status == 419) {
	        		this.csrf(() => {
	        			data._token = this.token;
	        			this.sendRegister(data);
	        		});
	        	} else {
	        		this.loginError('注册失败，请稍后重试');
	        	}
	        });
		}

		this.sendLogin = (data) => {
			$[this.loginForm.attr('method')](this.loginForm.attr('action'), data, data => {
	        	data.success ? this.loginSuccess(data.success) : this.loginError(data.error);
	        }, 'json').fail(error => {
	        	if (error.status == 419) {
	        		this.csrf(() => {
	        			data._token = this.token;
	        			this.sendLogin(data);
	        		});
	        	} else if (error.status == 500) {
	        		this.loginError('登录失败，请稍后重试');
	        	} else {
	        		this.loginError(error.responseJSON.message);
	        	}
	        });
		}

		this.sendChangePasswordSendMail = (data) => {
			$[this.changePasswordSendMailForm.attr('method')](this.changePasswordSendMailForm.attr('action'), data, data => {
	        	data.success ? this.changePasswordSendMailSuccess(data.success) : this.changePasswordSendMailError(data.error);
	        }, 'json').fail(error => {
	        	if (error.status == 419) {
	        		this.csrf(() => {
	        			data._token = this.token;
	        			this.sendChangePasswordSendMail(data);
	        		});
	        	} else if (error.status == 500) {
	        		this.changePasswordSendMailError('操作失败，请稍后重试');
	        	} else {
	        		this.changePasswordSendMailError(error.responseJSON.message);
	        	}
	        });
		}

		this.sendChangePassword = (data) => {
			$[this.changePasswordForm.attr('method')](this.changePasswordForm.attr('action'), data, data => {
	        	data.success ? this.changePasswordSuccess(data.success) : this.changePasswordError(data.error);
	        }, 'json').fail(error => {
	        	if (error.status == 419) {
	        		this.csrf(() => {
	        			data._token = this.token;
	        			this.sendChangePassword(data);
	        		});
	        	} else if (error.status == 500) {
	        		this.changePasswordError('操作失败，请稍后重试');
	        	} else {
	        		this.changePasswordError(error.responseJSON.message);
	        	}
	        });
		}

		this.sendLogout = () => {
			$.post('/member/logout', { _token: this.token }, () => {
	            this.logoutSuccess();
	        }).fail(error => {
	        	if (error.status == 419) {
	        		this.csrf(() => {
	        			this.sendLogout();
	        		});
	        	} else {
	        		this.logoutError('系统繁忙，请稍后重试');
	        	}
	        });
		}

		this.csrf();
		this.check();
		this.register();
		this.login();
		this.changePasswordSendMail();
		this.changePassword();
		this.logout();
	}

	global.Member = Member;
});